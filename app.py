from flask import Flask, render_template, request, redirect, url_for, session, flash, abort
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, logout_user, current_user, login_required
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime, date
from calendar import monthrange
import io
import pandas as pd
from flask import send_file
from PyPDF2 import PdfReader, PdfWriter
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import mm
import os
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from werkzeug.utils import secure_filename
import pandas as pd
from sqlalchemy.orm import joinedload  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
from sqlalchemy.orm import relationship
from flask_migrate import Migrate



app = Flask(__name__)
app.secret_key = os.environ.get('SECRET_KEY', 'a1b2c3randomstringxyz')

app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get(
    "DATABASE_URL",
    "postgresql://leave_user:r2gFAEfxP9e6NGFmgpyUS3uUdjagQwtv@dpg-d13p44q4d50c73e6ld40-a.singapore-postgres.render.com/leave_app_db_8p5d"
)

app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)
migrate = Migrate(app, db)




# --- Flask-Login Setup ---
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

# -------------------- Models --------------------
class User(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password = db.Column(db.String(255), nullable=False)
    role = db.Column(db.String(20), default='staff')
    prefix = db.Column(db.String(20))  # üëà ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ô‡∏≤‡∏¢ ‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß
    first_name = db.Column(db.String(100))
    last_name = db.Column(db.String(100))
    position = db.Column(db.String(100))  # üëà ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡∏£‡∏π ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà
    department = db.Column(db.String(100))
    


class LeaveRequest(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), db.ForeignKey('user.username'), nullable=False)
    leave_type = db.Column(db.String(20), nullable=False)
    start_date = db.Column(db.Date, nullable=True)
    end_date = db.Column(db.Date, nullable=True)
    date = db.Column(db.Date, nullable=True)
    reason = db.Column(db.String(200), nullable=True)
    time_from = db.Column(db.String(10), nullable=True)
    time_to = db.Column(db.String(10), nullable=True)
    hours = db.Column(db.Float, nullable=True)
    submitted_at = db.Column(db.DateTime, default=datetime.utcnow)
    status = db.Column(db.String(20), default='‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥') 
    contact_info = db.Column(db.String(255), nullable=True)
    user = relationship('User', backref='leaves')
    approved_by = db.Column(db.String(80), nullable=True)  # username ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
    
class UserNote(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    filename = db.Column(db.String(255))
    filepath = db.Column(db.String(255))
    uploaded_at = db.Column(db.DateTime, default=datetime.utcnow)

    user = db.relationship("User", backref="notes")


with app.app_context():
    db.create_all()

# --- Login Manager User Loader ---
@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# -------------------- Routes --------------------

@app.route('/admin/download_user_template')
@login_required
def download_user_template():
    if current_user.role != 'admin':
        return "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á", 403

    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° DataFrame ‡πÄ‡∏õ‡∏•‡πà‡∏≤
    columns = ['username', 'password', 'role', 'prefix', 'first_name', 'last_name', 'position', 'department']
    df = pd.DataFrame(columns=columns)

    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='Users')

    output.seek(0)
    return send_file(output, download_name='user_template.xlsx', as_attachment=True)

@app.route('/admin/import_users', methods=['GET', 'POST'])
@login_required
def import_users():
    if current_user.role != 'admin':
        flash('‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ', 'error')
        return redirect(url_for('home'))

    if request.method == 'POST':
        file = request.files['excel_file']
        if file and file.filename.endswith('.xlsx'):
            try:
                df = pd.read_excel(file)

                expected_columns = ['username', 'password', 'prefix', 'first_name', 'last_name', 'position', 'department', 'role']
                if not all(col in df.columns for col in expected_columns):
                    flash('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î', 'error')
                    return redirect(request.url)

                imported_count = 0
                for _, row in df.iterrows():
                    if User.query.filter_by(username=row['username']).first():
                        continue  # ‡∏Ç‡πâ‡∏≤‡∏° username ‡∏ã‡πâ‡∏≥

                    user = User(
                        username=row['username'],
                        password=generate_password_hash(str(row['password'])),  # ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™
                        prefix=row['prefix'],
                        first_name=row['first_name'],
                        last_name=row['last_name'],
                        position=row['position'],
                        department=row['department'],
                        role=row['role']
                    )
                    db.session.add(user)
                    imported_count += 1

                db.session.commit()
                flash(f'‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ {imported_count} ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success')
                return redirect(url_for('admin_dashboard'))

            except Exception as e:
                flash(f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}', 'error')
                return redirect(request.url)

        flash('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå .xlsx ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô', 'error')
    return render_template('upload_users.html')

@app.route('/print_leave_form/<int:leave_id>')
@login_required
def print_leave_form(leave_id):
    leave = LeaveRequest.query.get_or_404(leave_id)

    if current_user.role != 'admin' and current_user.username != leave.username:
        flash('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÉ‡∏ö‡∏•‡∏≤‡∏ô‡∏µ‡πâ', 'error')
        return redirect(url_for('report'))

    user = User.query.filter_by(username=leave.username).first()

    template_path = os.path.join('static', 'forms', 'leave_form_template.pdf')
    if not os.path.exists(template_path):
        return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÉ‡∏ö‡∏•‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ß‡πâ‡πÉ‡∏ô static/forms/", 404

    packet = io.BytesIO()
    c = canvas.Canvas(packet, pagesize=(595, 842))
    pdfmetrics.registerFont(TTFont('THSarabun', os.path.join('static', 'fonts', 'THSarabunNew.ttf')))
    c.setFont('THSarabun', 13)

    full_name = f"{user.prefix} {user.first_name} {user.last_name}"
    start_date = leave.date if leave.leave_type == '‡∏•‡∏≤‡∏¢‡πà‡∏≠‡∏¢' else leave.start_date
    end_date = leave.date if leave.leave_type == '‡∏•‡∏≤‡∏¢‡πà‡∏≠‡∏¢' else leave.end_date
    leave_days = leave.hours if leave.leave_type == '‡∏•‡∏≤‡∏¢‡πà‡∏≠‡∏¢' else (
        (leave.end_date - leave.start_date).days + 1 if leave.start_date and leave.end_date else 1)

    # ‚úî ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô (‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ö‡∏ô‡∏µ‡πâ)
    last_leave = LeaveRequest.query.filter(
        LeaveRequest.username == leave.username,
        LeaveRequest.leave_type == leave.leave_type,
        LeaveRequest.id != leave.id,
        LeaveRequest.status == '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥',
        LeaveRequest.submitted_at < leave.submitted_at
    ).order_by(LeaveRequest.submitted_at.desc()).first()

    # ‚úî ‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏•‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô (exclude ‡πÉ‡∏ö‡∏ô‡∏µ‡πâ)
    previous_leaves = LeaveRequest.query.filter(
        LeaveRequest.username == leave.username,
        LeaveRequest.leave_type == leave.leave_type,
        LeaveRequest.status == '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥',
        LeaveRequest.id != leave.id,
        LeaveRequest.submitted_at < leave.submitted_at
    ).all()

    total_before = 0
    for l in previous_leaves:
        if l.leave_type == '‡∏•‡∏≤‡∏¢‡πà‡∏≠‡∏¢' and l.hours:
            total_before += l.hours
        elif l.start_date and l.end_date:
            total_before += (l.end_date - l.start_date).days + 1

    total_with_current = total_before + (leave_days or 0)
    
    approver = User.query.filter_by(username=leave.approved_by).first() if leave.approved_by else None
    approval_date = leave.submitted_at.strftime('%d/%m/%Y') if leave.status == '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' else '-'
    
    if leave.status == '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' and approver:
        approver_fullname = f"{approver.prefix or ''}{approver.first_name} {approver.last_name}"
        approver_position = approver.position or '-'
    else:
        approver_fullname = '-'
        approver_position = '-'

    # üéØ ‡πÉ‡∏™‡πà‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
    c.drawString(275, 166, approver_fullname)     # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
    c.drawString(290, 127, approver_position)     # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
    c.drawString(277, 90, approval_date)         # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥

    # üñ® ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
    c.drawString(388.67, 705.71, leave.submitted_at.strftime('%d/%m/%Y'))
    c.drawString(145, 614, full_name)
    c.drawString(270.99, 613.90, user.position)
    c.drawString(96, 562, leave.leave_type)
    c.drawString(110, 527, leave.leave_type)
    c.drawString(175.20, 562, leave.reason or "-")
    c.drawString(110.62, 543.47, start_date.strftime('%d/%m/%Y'))
    c.drawString(203.35, 543.47, end_date.strftime('%d/%m/%Y'))
    c.drawString(300.46, 543.47, f"{leave_days:.1f}" if leave.leave_type == '‡∏•‡∏≤‡∏¢‡πà‡∏≠‡∏¢' else str(int(leave_days)))

    # ‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà
    c.drawString(204.95, 508.28, leave.contact_info or "-")

    # ‚úÖ ‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô)
    if last_leave:
        prev_start = last_leave.date if last_leave.leave_type == '‡∏•‡∏≤‡∏¢‡πà‡∏≠‡∏¢' else last_leave.start_date
        prev_end = last_leave.date if last_leave.leave_type == '‡∏•‡∏≤‡∏¢‡πà‡∏≠‡∏¢' else last_leave.end_date
        prev_days = last_leave.hours if last_leave.leave_type == '‡∏•‡∏≤‡∏¢‡πà‡∏≠‡∏¢' else (
            (last_leave.end_date - last_leave.start_date).days + 1 if last_leave.start_date and last_leave.end_date else 1)

        c.drawString(192.64, 527.08, prev_start.strftime('%d/%m/%Y'))
        c.drawString(280.96, 527.08, prev_end.strftime('%d/%m/%Y'))
        c.drawString(385.74, 527.08, f"{prev_days:.1f}" if last_leave.leave_type == '‡∏•‡∏≤‡∏¢‡πà‡∏≠‡∏¢' else str(int(prev_days)))
    else:
        c.drawString(230.64, 527.08, "-")
        c.drawString(315.96, 527.08, "-")
        c.drawString(400.74, 527.08, "-")

    # ‚úÖ ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    if leave.leave_type == '‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢':
        c.drawString(175, 330, str(int(total_before)))
        c.drawString(237, 330, str(int(leave_days)))
        c.drawString(300, 330, str(int(total_with_current)))
    elif leave.leave_type == '‡∏•‡∏≤‡∏Å‡∏¥‡∏à':
        c.drawString(175, 300, str(int(total_before)))
        c.drawString(237, 300, str(int(leave_days)))
        c.drawString(300, 300, str(int(total_with_current)))
    elif leave.leave_type == '‡∏•‡∏≤‡∏¢‡πà‡∏≠‡∏¢':
        c.drawString(285, 463, f"{total_before:.1f}")
        c.drawString(340, 463, f"{leave_days:.1f}")
        c.drawString(400, 463, f"{total_with_current:.1f}")

    # ‚úÖ ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    c.drawString(396.21, 473.22, user.first_name)
    c.drawString(380, 452.89, full_name)
    c.drawString(405.61, 434.95, user.position)

    if leave.status == '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥':
        c.drawString(377.02, 342.18, "X")

    c.save()

    # ‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï
    packet.seek(0)
    overlay = PdfReader(packet)
    template = PdfReader(template_path)
    writer = PdfWriter()
    page = template.pages[0]
    page.merge_page(overlay.pages[0])
    writer.add_page(page)

    output = io.BytesIO()
    writer.write(output)
    output.seek(0)

    return send_file(output, download_name=f"‡πÉ‡∏ö‡∏•‡∏≤‡∏Ç‡∏≠‡∏á_{user.first_name}.pdf", as_attachment=True)



@app.route('/')
@login_required
def home():
    username = current_user.username

    # ‡∏î‡∏∂‡∏á‡πÉ‡∏ö‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    latest_leave = LeaveRequest.query.filter_by(username=username).order_by(LeaveRequest.submitted_at.desc()).first()

    # ‡∏ô‡∏±‡∏ö‡πÉ‡∏ö‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ (status ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥')
    approved_count = LeaveRequest.query.filter(
        LeaveRequest.username == username,
        LeaveRequest.status.like('%‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥%')
    ).count()

    # ‡∏î‡∏∂‡∏á‡πÉ‡∏ö‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
    pending_leaves = LeaveRequest.query.filter_by(username=username, status='‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥').all()

    # ‡∏î‡∏∂‡∏á‡πÉ‡∏ö‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (limit 5 ‡πÉ‡∏ö)
    leaves = LeaveRequest.query.filter_by(username=username).order_by(LeaveRequest.submitted_at.desc()).limit(5).all()

    return render_template('home.html',
                           latest_leave=latest_leave,
                           approved_count=approved_count,
                           pending_leaves=pending_leaves,
                           leaves=leaves)


@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        u = request.form['username']
        p = request.form['password']
        user = User.query.filter_by(username=u).first()
        if user and check_password_hash(user.password, p):
            login_user(user)
            session['username'] = user.username
            session['role'] = user.role
            flash("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return redirect(url_for('home'))
        flash("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    return render_template('login.html')

@app.route('/user/<int:user_id>/upload_note', methods=['POST'])
@login_required
def upload_user_note(user_id):
    if current_user.role != 'admin':
        abort(403)
    user = User.query.get_or_404(user_id)
    file = request.files['file']
    if file:
        filename = secure_filename(file.filename)
        folder = os.path.join('static/uploads/notes', str(user.id))
        os.makedirs(folder, exist_ok=True)
        filepath = os.path.join(folder, filename)
        file.save(filepath)
        note = UserNote(user_id=user.id, filename=filename, filepath=f'uploads/notes/{user.id}/{filename}')
        db.session.add(note)
        db.session.commit()
        flash('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success')
    return redirect(url_for('view_user_leaves', user_id=user.id))

@app.route('/delete_note/<int:note_id>', methods=['POST'])
@login_required
def delete_user_note(note_id):
    note = UserNote.query.get_or_404(note_id)
    if current_user.role != 'admin':
        abort(403)
    try:
        os.remove(os.path.join('static', note.filepath))
    except:
        pass
    db.session.delete(note)
    db.session.commit()
    flash('‡∏•‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success')
    return redirect(url_for('view_user_leaves', user_id=note.user_id))


@app.route('/export_user_leaves/<int:user_id>')
@login_required
def export_user_leaves(user_id):
    start_month = request.args.get('start_month')
    end_month = request.args.get('end_month')
    
    user = User.query.get_or_404(user_id)
    
    query = LeaveRequest.query.filter_by(username=user.username)

    if start_month:
        start_date = datetime.strptime(start_month, "%Y-%m")
        query = query.filter(
            (LeaveRequest.date >= start_date) | 
            (LeaveRequest.start_date >= start_date)
        )
    if end_month:
        end_date = datetime.strptime(end_month, "%Y-%m")
        last_day = monthrange(end_date.year, end_date.month)[1]
        end_date = end_date.replace(day=last_day)
        query = query.filter(
            (LeaveRequest.date <= end_date) | 
            (LeaveRequest.end_date <= end_date)
        )

    leaves = query.order_by(LeaveRequest.submitted_at.desc()).all()

    data = []
    for leave in leaves:
        if leave.leave_type == '‡∏•‡∏≤‡∏¢‡πà‡∏≠‡∏¢':
            leave_days = 1 if leave.date else 0
        elif leave.start_date and leave.end_date:
            leave_days = (leave.end_date - leave.start_date).days + 1
        else:
            leave_days = 0

        if leave.reason and '‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' in leave.reason:
            status = '‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥'
        else:
            status = '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß'

        data.append({
            "‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•": f"{user.first_name} {user.last_name}",
            "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏≤": leave.leave_type,
            "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏≤": leave.date.strftime('%d/%m/%Y') if leave.leave_type == '‡∏•‡∏≤‡∏¢‡πà‡∏≠‡∏¢' and leave.date else (
                f"{leave.start_date.strftime('%d/%m/%Y')} - {leave.end_date.strftime('%d/%m/%Y')}"
                if leave.start_date and leave.end_date else '-'),
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏•‡∏≤": leave_days if leave.leave_type in ['‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢', '‡∏•‡∏≤‡∏Å‡∏¥‡∏à'] else '',
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á": leave.hours if leave.leave_type == '‡∏•‡∏≤‡∏¢‡πà‡∏≠‡∏¢' else '',
            "‡πÄ‡∏ß‡∏•‡∏≤ (‡∏à‡∏≤‡∏Å-‡∏ñ‡∏∂‡∏á)": f"{leave.time_from} - {leave.time_to}" if leave.leave_type == '‡∏•‡∏≤‡∏¢‡πà‡∏≠‡∏¢' else '',
            "‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•": leave.reason,
            "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": status,
            "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÉ‡∏ö‡∏•‡∏≤": leave.submitted_at.strftime('%d/%m/%Y %H:%M') if leave.submitted_at else '-',
        })

    df = pd.DataFrame(data)

    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='Leaves')

    output.seek(0)
    filename = f"leave_report_{user.first_name}_{user.last_name}.xlsx"
    return send_file(output, download_name=filename, as_attachment=True)

@app.route('/logout')
@login_required
def logout():
    logout_user()
    session.clear()
    flash("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    return redirect(url_for('login'))

@app.route('/admin/leaves')
@login_required
def admin_leaves():
    if current_user.role != 'admin':
        return "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ", 403

    page = request.args.get('page', 1, type=int)
    per_page = 20  # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á 20 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤

    query = LeaveRequest.query.join(User, LeaveRequest.username == User.username)

    if current_user.position not in ['‡∏ú‡∏π‡πâ‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Å‡∏≤‡∏£', '‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï', '‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ']:
        query = query.filter(User.department == current_user.department)

    query = query.order_by(LeaveRequest.submitted_at.desc())

    pagination = query.paginate(page=page, per_page=per_page)
    leaves = pagination.items

    return render_template('admin_leaves.html', leaves=leaves, pagination=pagination)


@app.route('/admin/leaves/<int:leave_id>/approve', methods=['POST'])
@login_required
def approve_leave(leave_id):
    leave = LeaveRequest.query.get_or_404(leave_id)
    user = User.query.filter_by(username=leave.username).first()

    if current_user.role != 'admin':
        return "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ", 403

    if current_user.position not in ['‡∏ú‡∏π‡πâ‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Å‡∏≤‡∏£', '‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï', '‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ'] and user.department != current_user.department:
        flash("‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ö‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
        return redirect(url_for('admin_leaves'))

    leave.status = '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥'
    leave.approved_by = current_user.username  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏£‡∏¥‡∏á
    db.session.commit()
    flash("‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ö‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    return redirect(url_for('admin_leaves'))


@app.route('/admin/leaves/<int:leave_id>/reject', methods=['POST'])
@login_required
def reject_leave(leave_id):
    if current_user.role != 'admin':
        return "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ", 403
    leave = LeaveRequest.query.get_or_404(leave_id)
    leave.status = '‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥'
    db.session.commit()
    flash("‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ö‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    return redirect(url_for('admin_leaves'))

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        u = request.form['username']
        p = request.form['password']
        role = request.form.get('role', 'staff')
        if User.query.filter_by(username=u).first():
            flash("‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß")
            return redirect(url_for('register'))
        hashed_pw = generate_password_hash(p)
        new_user = User(username=u, password=hashed_pw, role=role)
        db.session.add(new_user)
        db.session.commit()
        flash("‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
        return redirect(url_for('login'))
    return render_template('register.html')

@app.route('/profile', methods=['GET', 'POST'])
@login_required
def profile():
    user = current_user
    if request.method == 'POST':
        user.first_name = request.form['first_name']
        user.last_name = request.form['last_name']
        user.department = request.form['department']
        user.prefix = request.form['prefix']
        user.position = request.form['position']
        db.session.commit()
        flash("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        return redirect(url_for('profile'))
    return render_template('profile.html', user=user)

@app.route('/leave', methods=['GET', 'POST'])
@login_required
def leave():
    if request.method == 'POST':
        leave_type = request.form['leave_type']
        reason = request.form['reason']
        contact_info = request.form.get('contact_info')  # ‚úÖ ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
        time_from = request.form.get('time_from')
        time_to = request.form.get('time_to')
        hours = request.form.get('hours')

        if leave_type == '‡∏•‡∏≤‡∏¢‡πà‡∏≠‡∏¢':
            date_str = request.form.get('date')
            date_val = datetime.strptime(date_str, '%Y-%m-%d').date() if date_str else None
            leave = LeaveRequest(
                username=current_user.username,
                leave_type=leave_type,
                date=date_val,
                reason=reason,
                contact_info=contact_info,
                time_from=time_from,
                time_to=time_to,
                hours=float(hours) if hours else None
            )
        else:
            start_date = datetime.strptime(request.form['start_date'], '%Y-%m-%d').date()
            end_date = datetime.strptime(request.form['end_date'], '%Y-%m-%d').date()
            leave = LeaveRequest(
                username=current_user.username,
                leave_type=leave_type,
                start_date=start_date,
                end_date=end_date,
                reason=reason,
                contact_info=contact_info,
                hours=((end_date - start_date).days + 1)
            )

        db.session.add(leave)
        db.session.commit()
        flash("‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        return redirect(url_for('home'))

    return render_template('leave_form.html')


@app.route('/leave/edit/<int:leave_id>', methods=['GET', 'POST'])
@login_required
def edit_leave(leave_id):
    leave = LeaveRequest.query.get_or_404(leave_id)
    if leave.username != current_user.username or leave.status != '‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥':
        flash("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ö‡∏•‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ", "error")
        return redirect(url_for('home'))

    if request.method == 'POST':
        leave.leave_type = request.form['leave_type']
        leave.reason = request.form['reason']
        leave.contact_info = request.form.get('contact_info')

        if leave.leave_type == '‡∏•‡∏≤‡∏¢‡πà‡∏≠‡∏¢':
            leave.date = datetime.strptime(request.form['date'], '%Y-%m-%d').date()
            leave.time_from = request.form.get('time_from')
            leave.time_to = request.form.get('time_to')
            leave.hours = float(request.form.get('hours') or 0)
            leave.start_date = None
            leave.end_date = None
        else:
            leave.start_date = datetime.strptime(request.form['start_date'], '%Y-%m-%d').date()
            leave.end_date = datetime.strptime(request.form['end_date'], '%Y-%m-%d').date()
            leave.date = None
            leave.hours = (leave.end_date - leave.start_date).days + 1
            leave.time_from = None
            leave.time_to = None

        db.session.commit()
        flash("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ö‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        return redirect(url_for('home'))

    return render_template('edit_leave_form.html', leave=leave)

@app.route('/leave/cancel/<int:leave_id>', methods=['POST'])
@login_required
def cancel_leave(leave_id):
    leave = LeaveRequest.query.get_or_404(leave_id)
    if leave.username != current_user.username or leave.status != '‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥':
        flash("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÉ‡∏ö‡∏•‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ", "error")
        return redirect(url_for('home'))

    db.session.delete(leave)
    db.session.commit()
    flash("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÉ‡∏ö‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    return redirect(url_for('home'))

@app.route('/admin/delete_leave/<int:leave_id>', methods=['POST'])
@login_required
def delete_leave(leave_id):
    if current_user.role != 'admin':
        flash("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö‡πÉ‡∏ö‡∏•‡∏≤", "error")
        return redirect(url_for('admin_dashboard'))

    leave = LeaveRequest.query.get_or_404(leave_id)
    db.session.delete(leave)
    db.session.commit()
    flash("‡∏•‡∏ö‡πÉ‡∏ö‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", "success")
    
    # üëâ redirect ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á user ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏¥‡∏°
    user = User.query.filter_by(username=leave.username).first()
    return redirect(url_for('view_user_leaves', user_id=user.id))

@app.route('/report')
@login_required
def report():
    start_date_str = request.args.get('start_date')
    end_date_str = request.args.get('end_date')

    # ‡∏Å‡∏£‡∏≠‡∏á‡πÉ‡∏ö‡∏•‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á user ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏™‡∏°‡∏≠
    query = LeaveRequest.query.filter_by(username=current_user.username)

    if start_date_str and end_date_str:
        try:
            start_date = datetime.strptime(start_date_str, '%Y-%m-%d').date()
            end_date = datetime.strptime(end_date_str, '%Y-%m-%d').date()
            query = query.filter(
                ((LeaveRequest.date >= start_date) & (LeaveRequest.date <= end_date)) |
                ((LeaveRequest.start_date <= end_date) & (LeaveRequest.end_date >= start_date))
            )
        except ValueError:
            flash("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "error")

    leaves = query.order_by(LeaveRequest.submitted_at.desc()).all()

    # ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
    summary = {'‡∏•‡∏≤‡∏Å‡∏¥‡∏à': 0, '‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢': 0, '‡∏•‡∏≤‡∏¢‡πà‡∏≠‡∏¢': 0.0}
    for leave in leaves:
        if leave.leave_type == '‡∏•‡∏≤‡∏¢‡πà‡∏≠‡∏¢' and leave.date:
            leave.leave_days = 1
        elif leave.start_date and leave.end_date:
            leave.leave_days = (leave.end_date - leave.start_date).days + 1
        else:
            leave.leave_days = 0

        if leave.status == '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥':
            if leave.leave_type == '‡∏•‡∏≤‡∏¢‡πà‡∏≠‡∏¢':
                summary['‡∏•‡∏≤‡∏¢‡πà‡∏≠‡∏¢'] += leave.hours or 0
            else:
                summary[leave.leave_type] += leave.leave_days

    # ‡∏î‡∏∂‡∏á note ‡∏Ç‡∏≠‡∏á user ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞ role ‡∏≠‡∏∞‡πÑ‡∏£ ‡∏Å‡πá‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
    notes = UserNote.query.filter_by(user_id=current_user.id).order_by(UserNote.uploaded_at.desc()).all()

    return render_template(
        'report.html',
        leaves=leaves,
        summary=summary,
        start_date=start_date_str,
        end_date=end_date_str,
        notes=notes
    )







@app.route('/admin')
@login_required
def admin_dashboard():
    if current_user.role != 'admin':
        return "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ", 403

    users = User.query.all()

    # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ö‡∏•‡∏≤‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏Å‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô ‡∏ú‡∏π‡πâ‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Å‡∏≤‡∏£/‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï ‡πÄ‡∏´‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
    if current_user.position in ['‡∏ú‡∏π‡πâ‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Å‡∏≤‡∏£', '‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï']:
        pending_count = LeaveRequest.query.filter_by(status='‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥').count()
    else:
        pending_count = LeaveRequest.query.join(User, LeaveRequest.username == User.username) \
            .filter(LeaveRequest.status == '‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥') \
            .filter(User.department == current_user.department) \
            .count()

    return render_template('admin.html', users=users, pending_count=pending_count)



@app.route('/admin/search')
@login_required
def admin_search():
    query = request.args.get('q', '')
    users = User.query.filter(User.first_name.contains(query) | User.last_name.contains(query)).all()
    return render_template('admin.html', users=users)

@app.route('/change_password/<int:user_id>', methods=['POST'])
@login_required
def change_password(user_id):
    if current_user.role != 'admin':
        return "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ", 403
    user = User.query.get(user_id)
    if not user:
        flash("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")
        return redirect(url_for('admin_dashboard'))
    new_password = request.form.get('new_password')
    if not new_password or len(new_password) < 4:
        flash("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 4 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£")
        return redirect(url_for('admin_dashboard'))
    user.password = generate_password_hash(new_password)
    db.session.commit()
    flash(f"‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á {user.username} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    return redirect(url_for('admin_dashboard'))

@app.route('/change_password_self', methods=['GET', 'POST'])
@login_required
def change_password_self():
    if request.method == 'POST':
        current_password = request.form.get('current_password')
        new_password = request.form.get('new_password')
        confirm_password = request.form.get('confirm_password')

        if not check_password_hash(current_user.password, current_password):
            flash('‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', 'danger')
            return redirect(url_for('change_password_self'))

        if new_password != confirm_password:
            flash('‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô', 'danger')
            return redirect(url_for('change_password_self'))

        if len(new_password) < 4:
            flash('‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 4 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£', 'danger')
            return redirect(url_for('change_password_self'))

        current_user.password = generate_password_hash(new_password)
        db.session.commit()

        flash('‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success')
        return redirect(url_for('profile'))

    return render_template('change_password_self.html')


@app.route('/change_role/<int:user_id>', methods=['POST'])
@login_required
def change_role(user_id):
    if current_user.role != 'admin':
        return "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ", 403
    user = User.query.get(user_id)
    if user:
        new_role = request.form.get('role')
        if new_role in ['staff', 'admin']:
            user.role = new_role
            db.session.commit()
            flash(f"‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á {user.username} ‡πÄ‡∏õ‡πá‡∏ô {new_role} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        else:
            flash("‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    else:
        flash("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")
    return redirect(url_for('admin_dashboard'))

@app.context_processor
def inject_pending_count():
    if current_user.is_authenticated:
        if current_user.role == 'admin':
            # ‚úÖ ‡∏ú‡∏π‡πâ‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Å‡∏≤‡∏£ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï ‡πÄ‡∏´‡πá‡∏ô‡∏ó‡∏∏‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å
            if current_user.position in ['‡∏ú‡∏π‡πâ‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Å‡∏≤‡∏£', '‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï']:
                count = LeaveRequest.query.filter_by(status='‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥').count()
            else:
                # ‚úÖ ‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ö‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
                count = LeaveRequest.query.join(User, LeaveRequest.username == User.username) \
                    .filter(LeaveRequest.status == '‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥') \
                    .filter(User.department == current_user.department) \
                    .count()
            return dict(pending_count=count)
    return dict(pending_count=0)


@app.route('/user/<int:user_id>/leaves')
@login_required
def view_user_leaves(user_id):
    if current_user.role != 'admin':
        flash('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ', 'error')
        return redirect(url_for('home'))

    user = User.query.get_or_404(user_id)

    start_month = request.args.get('start_month')
    end_month = request.args.get('end_month')

    query = LeaveRequest.query.filter_by(username=user.username)

    if start_month and end_month:
        try:
            start_date = datetime.strptime(start_month, '%Y-%m').date()
            end_dt = datetime.strptime(end_month, '%Y-%m')
            last_day = monthrange(end_dt.year, end_dt.month)[1]
            end_date = date(end_dt.year, end_dt.month, last_day)

            query = query.filter(
                (
                    (LeaveRequest.date >= start_date) & (LeaveRequest.date <= end_date)
                ) | (
                    (LeaveRequest.start_date <= end_date) & (LeaveRequest.end_date >= start_date)
                )
            )
        except ValueError:
            flash('‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', 'error')

    leaves = query.order_by(LeaveRequest.submitted_at.desc()).all()

    summary = {'‡∏•‡∏≤‡∏õ‡πà‡∏ß‡∏¢': 0, '‡∏•‡∏≤‡∏Å‡∏¥‡∏à': 0, '‡∏•‡∏≤‡∏¢‡πà‡∏≠‡∏¢': 0.0}

    for leave in leaves:
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        if leave.leave_type == '‡∏•‡∏≤‡∏¢‡πà‡∏≠‡∏¢' and leave.date:
            leave.days = 1
        elif leave.start_date and leave.end_date:
            leave.days = (leave.end_date - leave.start_date).days + 1
        else:
            leave.days = 0

        # ‚úÖ ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        if leave.status == '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥':
            if leave.leave_type == '‡∏•‡∏≤‡∏¢‡πà‡∏≠‡∏¢':
                summary['‡∏•‡∏≤‡∏¢‡πà‡∏≠‡∏¢'] += leave.hours or 0
            else:
                summary[leave.leave_type] += leave.days

        # ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ fallback ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏
        if leave.status not in ['‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥', '‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥']:
            leave.status = '‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥'

    return render_template('view_user_leaves.html', user=user, leaves=leaves, summary=summary)




@app.context_processor
def inject_user():
    if current_user.is_authenticated:
        return dict(current_user=current_user)
    return dict(current_user=None)

if __name__ == '__main__':
    import os
    port = int(os.environ.get("PORT", 5000))  # Render ‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤ PORT ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    app.run(host='0.0.0.0', port=port)
